{"version":3,"sources":["components/card-list/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","onChange","App","onSearchChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filterdMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAGaA,G,kBAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCHbC,EAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNhDM,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOD,YAAaA,EAAaE,SAAUD,KC6ChCE,E,kDAvCb,aAAc,IAAD,8BACX,gBAgBFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SAhBxB,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,gEAUO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAWkB,S,+BAUpC,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAkBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYc,wBAEnG,OACE,sBAAKhC,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAce,KAAKZ,iBAE5D,cAAC,EAAD,CAAUP,SACRoB,W,GAnCUK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f5186b5d.chunk.js","sourcesContent":["\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2>{props.monster.name}</h2> \r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import './card-list.styles.css';\r\n\r\nimport {Card} from './card/card.component';\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        {\r\n            props.monsters.map(monster => <Card key={monster.id} monster={monster}/>)\r\n        }\r\n    </div>\r\n);","\r\nexport const SearchBox = ({ placeholder, handleChange}) =>(\r\n    <input placeholder={placeholder} onChange={handleChange}/>\r\n);","import './App.css';\nimport { Component } from 'react';\n\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n    \n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters : users }))\n  }\n\n  // Arrow function => Bind function context to the place it is declared, to have \"this\" pointing to App object\n  onSearchChange = (e) => {\n    this.setState({ \n      searchField: e.target.value \n    });\n  }\n\nrender() {\n  const { monsters, searchField } = this.state;\n  const filterdMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()))\n\n  return (\n    <div className=\"App\">\n      <h1>Monster Rolodex</h1>\n      <SearchBox placeholder=\"Search monsters\" handleChange={this.onSearchChange}/>\n\n      <CardList monsters={\n        filterdMonsters\n      }></CardList>\n    </div>\n  );\n}\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}